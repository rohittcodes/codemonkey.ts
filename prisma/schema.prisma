generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  name              String?
  username          String?      @unique
  email             String       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  problems          Problem[]
  submissions       Submission[]
  solvedProblems    Problem[]    @relation("SolvedProblems")
  comments          Comment[]
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Account {
  id                String      @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.Text
  access_token      String?     @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.Text
  session_state     String?

  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String      @id @default(cuid())
  sessionToken  String      @unique
  userId        String
  expires       DateTime
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  description     String        @db.Text  // Markdown content including examples
  difficulty     Difficulty
  tags            String[]
  template        String        @db.Text
  testCases       TestCase[]
  author          User          @relation(fields: [authorId], references: [id])
  authorId        String
  submissions     Submission[]
  solvedBy        User[]        @relation("SolvedProblems")
  comments        Comment[]

  isPublished     Boolean       @default(false)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Submission {
  id              String           @id @default(cuid())
  code            String           @db.Text
  language        String
  status          SubmissionStatus
  runtime         Int?             // in milliseconds
  memory          Int?             // in KB
  errorMessage    String?          @db.Text
  testCasesPassed Int              @default(0)
  totalTestCases  Int              @default(0)
  
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  problem         Problem          @relation(fields: [problemId], references: [id])
  problemId       String
  
  createdAt       DateTime         @default(now())
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

model TestCase {
  id              String    @id @default(cuid())
  input           String    @db.Text
  output          String    @db.Text
  isHidden        Boolean   @default(false)
  problem         Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId       String
}

model Comment {
  id              String    @id @default(cuid())
  content         String    @db.Text
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  problem         Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId       String
  parentId        String?
  parent          Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies         Comment[] @relation("CommentReplies")
  
  createdAt       DateTime  @default(now())
}
